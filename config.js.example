module.exports = (async () => {
let config = {};

if(process.env.bookings_env !== "dev") {

    return await getConfigFromVault();

} else {

    /**
     * Server config
     */
    config.host = "localhost";
    config.port = 8080;
    config.basePath = "http://localhost:8080/";

    /**
     * Database
     */

    config.databaseURL = "sqlite://bookings.sqlite/bookings";

    /**
     *  Log on with google OAuth
     */
    config.GoogleClientID = "";
    config.GoogleClientSecret = "";
    config.GoogleCallback = "http://localhost:8080/auth/google/callback";

    /**
     * Log on with Facebook
     */
    config.FacebookAppID = "";
    config.FacebookAppSecret = "";

    /**
     * Service Account to send e-mail
     */
    config.email = true;
    config.emailFrom = "bookings-auto@woodcraft.org.uk";
    config.emailClientEmail = "";
    config.emailPrivateKey = "";

    return config;
}


async function getConfigFromVault() {

        if(!process.env.bookings_env)throw new Error('bookings_env not set');
        if(!process.env.bookings_vault_url)throw new Error('bookings_vault_url not set');
        if(!process.env.bookings_vault_token)throw new Error('bookings_vault_token not set');
        if(!process.env.bookings_role_id)throw new Error('bookings_role_id not set');

    try {

        const options = {
            apiVersion: 'v1',
            endpoint: process.env.bookings_vault_url,
            token: process.env.bookings_vault_token //this token must allow us to create a corresponding approle secret
        };

        console.log("URL IS"+process.env.bookings_vault_url);

        const role_name = "bookings_" + process.env.bookings_env;

        console.log(options);
        const vault = require("node-vault")(options);
        const secret = await vault.getApproleRoleSecret({role_name: role_name});//get an approle secret
        const login = await vault.approleLogin({role_id:process.env.bookings_role_id, secret_id:secret.data.secret_id});//use it to login as the approle
        vault.token = login.auth.client_token;

        const vaultConfig = {};

        vaultConfig.host = await getValue(vault, "HOST");
        vaultConfig.port = await getValue(vault, "PORT");
        vaultConfig.basePath = await getValue(vault, "BASE_PATH");

        vaultConfig.databaseURL = await getValue(vault,"DB_URL");

        vaultConfig.GoogleClientID = await getValue(vault, "GOOGLE_CLIENT_ID");
        vaultConfig.GoogleClientSecret = await getValue(vault, "GOOGLE_CLIENT_SECRET");
        vaultConfig.GoogleCallback = vaultConfig.basePath+'/auth/google/callback';

        vaultConfig.FacebookAppID = await getValue(vault, "FACEBOOK_APP_ID");
        vaultConfig.FacebookAppSecret = await getValue(vault, "FACEBOOK_APP_SECRET");

        vaultConfig.email = await getValue(vault, "EMAIL_ENABLED");

        return Promise.resolve(vaultConfig);
    } catch(error) {
        console.log(error);
        return {}
    }
}

async function getValue(vault, value) {
    const response =  await vault.read('kv/bookings/'+process.env.bookings_env+'/'+value);
    return response.data.value;
};
})();