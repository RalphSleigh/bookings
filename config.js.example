module.exports = () => {
    if (process.env.BOOKINGS_VAULT_URL) {

        return getConfigFromVault();

    } else {

        const config = {};
        /**
         * Server config
         */
        config.ENV = "dev";

        config.HOST = "localhost";
        config.PORT = 8080;
        config.BASE_PATH = "http://localhost:8080/";

        config.AWS_LOGGING_KEY = "";
        config.AWS_LOGGING_SECRET = "";
        config.AWS_LOGGING_STREAM = "";
        config.AWS_LOGGING_GROUP = "";

        /**
         * Database
         */

        config.DB_URL = "sqlite://bookings.sqlite";

        /**
         *  Backups
         */

        config.AWS_BACKUP_BUCKET = '';
        config.AWS_BACKUP_PATH = '';
        config.AWS_BACKUP_KEY = '';
        config.AWS_BACKUP_SECRET = '';
        config.BACKUP_PUBLIC_KEY = '';

        /**
         *  Log on with google OAuth
         */
        config.GOOGLE_CLIENT_ID = "dsfgh";
        config.GOOGLE_CLIENT_SECRET = "sdfgh";
        config.GOOGLE_CALLBACK = "http://localhost:8080/auth/google/callback";

        /**
         * Log on with Facebook
         */
        config.FACEBOOK_APP_ID = "sfgh";
        config.FACEBOOK_APP_SECRET = "fghfg";

        /**
         * Login with Yahoo!
          */

          config.YAHOO_CLIENT_ID = "";
           config.YAHOO_CLIENT_SECRET = "";

           /**
           * Login with Microsoft
           */

           config.MICROSOFT_CLIENT_ID = "";
           config.MICROSOFT_CLIENT_SECRET = "";

        /**
         * Service Account to send e-mail
         */
        config.EMAIL = false;
        config.EMAIL_FROM = "bookings-auto@woodcraft.org.uk";
        config.EMAIL_CLIENT_EMAIL = "";
        config.EMAIL_PRIVATE_KEY = "";

        module.exports = config;
        return Promise.resolve(config);
    }
};

async function getConfigFromVault() {

    try {

        const url = require('url').URL;

        const vaultURL = new url(process.env.BOOKINGS_VAULT_URL);
        const connectURL = new url(process.env.BOOKINGS_VAULT_URL);

        connectURL.username = "";
        connectURL.password = "";
        connectURL.pathname = "";

        const options = {
            apiVersion: 'v1',
            endpoint: connectURL.toString().slice(0, -1), //don't ask stupid module..
            token: vaultURL.password //this token must allow us to create a corresponding approle secret
        };

        const role_name = "bookings_" + vaultURL.username;

        const vault = require("node-vault")(options);
        const secret = await vault.getApproleRoleSecret({role_name: role_name});//get an approle secret
        const login = await vault.approleLogin({role_id:role_name, secret_id:secret.data.secret_id});//use it to login as the approle
        vault.token = login.auth.client_token;

        const vaultConfig = {};

        vaultConfig.ENV = await getValue(vault, vaultURL.username, "ENV");

        vaultConfig.HOST = await getValue(vault, vaultURL.username, "HOST");
        vaultConfig.PORT = await getValue(vault, vaultURL.username, "PORT");
        vaultConfig.BASE_PATH = await getValue(vault, vaultURL.username, "BASE_PATH");

        vaultConfig.AWS_LOGGING_KEY = await getValue(vault, vaultURL.username,"AWS_LOGGING_KEY");
        vaultConfig.AWS_LOGGING_SECRET = await getValue(vault, vaultURL.username,"AWS_LOGGING_SECRET");
        vaultConfig.AWS_LOGGING_STREAM = await getValue(vault, vaultURL.username,"AWS_LOGGING_STREAM");
        vaultConfig.AWS_LOGGING_GROUP = await getValue(vault, vaultURL.username,"AWS_LOGGING_GROUP");

        vaultConfig.DB_URL = await getValue(vault, vaultURL.username,"DB_URL");

        vaultConfig.AWS_BACKUP_BUCKET = await getValue(vault, vaultURL.username, "AWS_BACKUP_BUCKET");
        vaultConfig.AWS_BACKUP_PATH = await getValue(vault, vaultURL.username, "AWS_BACKUP_PATH");
        vaultConfig.AWS_BACKUP_KEY = await getValue(vault, vaultURL.username, "AWS_BACKUP_KEY");
        vaultConfig.AWS_BACKUP_SECRET = await getValue(vault, vaultURL.username, "AWS_BACKUP_SECRET");
        vaultConfig.BACKUP_PUBLIC_KEY = await getValue(vault, vaultURL.username, "BACKUP_PUBLIC_KEY");

        vaultConfig.GOOGLE_CLIENT_ID = await getValue(vault, vaultURL.username, "GOOGLE_CLIENT_ID");
        vaultConfig.GOOGLE_CLIENT_SECRET = await getValue(vault, vaultURL.username, "GOOGLE_CLIENT_SECRET");
        vaultConfig.GOOGLE_CALLBACK = vaultConfig.BASE_PATH + '/auth/google/callback';

        vaultConfig.FACEBOOK_APP_ID = await getValue(vault, vaultURL.username, "FACEBOOK_APP_ID");
        vaultConfig.FACEBOOK_APP_SECRET = await getValue(vault, vaultURL.username, "FACEBOOK_APP_SECRET");

        vaultConfig.MICROSOFT_CLIENT_ID = await getValue(vault, vaultURL.username, "MICROSOFT_CLIENT_ID");
        vaultConfig.MICROSOFT_CLIENT_SECRET = await getValue(vault, vaultURL.username, "MICROSOFT_CLIENT_SECRET");

        vaultConfig.YAHOO_CLIENT_ID = await getValue(vault, vaultURL.username, "YAHOO_CLIENT_ID");
        vaultConfig.YAHOO_CLIENT_SECRET = await getValue(vault, vaultURL.username, "YAHOO_CLIENT_SECRET");

        vaultConfig.EMAIL = (await getValue(vault, vaultURL.username, "EMAIL_ENABLED") === 'true');

        module.exports = vaultConfig;
        return Promise.resolve(vaultConfig);
    } catch(error) {
        console.log(error);
        return {}
    }
}

async function getValue(vault, role_name, value) {
    const response =  await vault.read('kv/bookings/'+role_name+'/'+value);
    return response.data.value;
}
